rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function userIsModerator() {
      return request.auth.token.isModerator == true;
    }

    function documentFieldsCheckOut(requiredFields, optionalFields) {
      let allFields = requiredFields.concat(optionalFields);
      return request.resource.data.keys().hasAll(requiredFields) &&
        request.resource.data.keys().hasOnly(allFields);
    }

    function editOnlyChangesFields(allowedFields) {
      return debug(request.resource.data.keys()).hasOnly(allowedFields);
    }

    // The name of userId can be anything
    match /users/{userId} {
      allow read, write: if request.auth.uid == userId;
    }
    match /posts/{postId} {
      allow read: if (resource.data.visibility == "public") ||
        (resource.data.authorId == request.auth.uid);
      allow update: if ((resource.data.authorId == request.auth.uid) || userIsModerator())
          && editOnlyChangesFields(["visibility", "content"]);
      allow create: if (request.resource.data.authorId == request.auth.uid) &&
        documentFieldsCheckOut(["authorId", "visibility", "content","headline"], 
        ["photo", "tags", "location"]);
    }
    match /rooms/{roomId} { 
      function userIsRoomMod() {
        return (request.auth.uid in get(/databases/$(database)/documents/rooms/$(roomId)).data.roomMods);
      }

      // Security rules for rooms should go here.
      match /posts/{postId} {
        allow update: if (resource.data.authorId == request.auth.uid) ||
          userIsRoomMod();
      }
    }

    match /examanations/{docId} {
      allow read: if true;
    }
  }
}